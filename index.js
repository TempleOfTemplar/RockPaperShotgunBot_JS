const Telegraf = require('telegraf');
const SocksAgent = require('socks5-https-client/lib/Agent');

const socksAgent = new SocksAgent({
    socksHost: "socksy.seriyps.ru",
    socksPort: 1080,
    socksUsername: "tg-mrsaram",
    socksPassword: "hAjRhFlx",
});

const bot = new Telegraf('771682963:AAEmFJwxI3yVxIILYYWkSXfquQqa_hUsvzk', {
    telegram: {
        agent: socksAgent
    }
});

let totalGames = 0, wins = 0, loses = 0;

bot.start((ctx) => {
    ctx.reply('–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?', testMenu)
});
bot.help((ctx) => ctx.reply('Send me a sticker'));
bot.on('sticker', (ctx) => ctx.reply('üëç'));
bot.hears('/score', (ctx) => displayScore(ctx));

const testMenu = Telegraf.Extra
    .markdown()
    .markup((m) => m.inlineKeyboard([
        m.callbackButton('–ö–∞–º–µ–Ω—å', 'r'),
        m.callbackButton('–ù–æ–∂–Ω–∏—Ü—ã', 's'),
        m.callbackButton('–ë—É–º–∞–≥–∞', 'p')
    ]));

bot.action('r', (ctx) => game(ctx));
bot.action('p', (ctx) => game(ctx));
bot.action('s', (ctx) => game(ctx));

bot.startPolling();

function getComputerChoise() {
    const choices = ["r", "p", "s"],
        randomNumber = Math.floor(Math.random() * choices.length);
    return choices[randomNumber];
}

function displayScore(ctx) {
    ctx.reply(`–¢—ã –ø–æ–±–µ–¥–∏–ª ${wins} —Ä–∞–∑, –ø—Ä–æ–∏–≥—Ä–∞–ª ${loses} —Ä–∞–∑ –∏–∑ ${totalGames} –∏–≥—Ä`);
}

function game(ctx) {
    const userChoice = ctx.match,
        computerChoice = getComputerChoise();
    switch (userChoice + computerChoice) {
        case "rs":
        case "pr":
        case "sp":
            totalGames++;
            wins++;
            ctx.reply(choicesToText(userChoice, computerChoice) + "\n (–¢—ã –ø–æ–±–µ–¥–∏–ª!)");
            break;
        case "rp":
        case "ps":
        case "sr":
            totalGames++;
            loses++;
            ctx.reply(choicesToText(userChoice, computerChoice) + "\n (–¢—ã –ü—Ä–æ–∏–≥—Ä–∞–ª!)");
            break;
        case "rr":
        case "pp":
        case "ss":
            totalGames++;
            ctx.reply(choicesToText(userChoice, computerChoice) + "\n (–ù–∏—á—å—è!)");
            break;
    }
    ctx.reply('–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?', testMenu)
}

function win(ctx) {
    totalGames++;
    wins++;
    ctx.reply(choicesToText(userChoice, computerChoice) + " (–¢—ã –ø–æ–±–µ–¥–∏–ª!)");
}

function lose(ctx) {
    totalGames++;
    loses--;
    ctx.reply(choicesToText(userChoice, computerChoice) + " (–¢—ã –ü—Ä–æ–∏–≥—Ä–∞–ª!)");
}

function draw(ctx) {
    totalGames++;
    ctx.reply(choicesToText(userChoice, computerChoice) + " (–ù–∏—á—å—è!)");
}

function choicesToText(userChoice, computerChoice) {
    return `===> –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª ${choiceToText(computerChoice)}, —Ç—ã –≤—ã–±—Ä–∞–ª ${choiceToText(userChoice)}. <===`
}

function choiceToText(choice) {
    switch (choice) {
        case "r":
            return "–ö–∞–º–µ–Ω—å";
        case "p":
            return "–ë—É–º–∞–≥—É";
        case "s":
            return "–ù–æ–∂–Ω–∏—Ü—ã";
    }
}